['Salam', 'Atajan'].forEach(alert);
var $ = 2, _ = 3;
console.log($ + _);
alert($ + _);
'use strict'; -- всегда должен находиться первым
var COLOR_ORANGE = 'orange'; -- константы
123 -- typeof(123) -- number
'str' -- typeof('str') -- sttring
null -- typeof(null) -- null
x -- typeof(x) -- undefined
NaN -- typeof('str' * 2) -- NaN
boolean -- typeof(true) -- boolean
infinity -- 1/0 -- infinity
object -- var obj = {name: 'Serdar'}-- typeof(obj) -- 

побитовые операторы
AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
var a = 1, b = 2;
var c = 3 - (a = b + 5);
alert(a); // 7
alert(b); // 2
alert(c); // -4
alert(18 % 5); // 3
alert(22 % 8); // 6
alert(58 % 7); // 2
var i = 5;
var a = i++;
alert(a);
var i = 1;
alert(--i);
var n = 5;
console.log(+'8' * n++); // 40
console.log('8' + n++); // 86
console.log('8' * n--); // 40
console.log(+'8' * n--); // 40
console.log(+'8' * ++n); // 48
console.log(+'8' * --n); // 32
console.log(+'8' / --n); // 2
var n = 5.25;
alert(n^);
var g = (5,6);
alert(g);
-----------------------------------------
 операторы сравнение 
 В JavaScript есть логические значения true (истина) и false (ложь). Операторы сравнения возвращают их.
Строки сравниваются побуквенно.
Значения разных типов приводятся к числу при сравнении, за исключением строгого равенства === (!==).
Значения null и undefined равны == друг другу и не равны ничему другому. В других сравнениях (с участием >,<) их лучше не использовать, так как они ведут себя не как 0.
================
побитовые операторы
& - и
| - или
^ - исключающий или
~ - не (not)
================
Взаимодействие с пользователем: alert, prompt, confirm
alert -- выводить сообщение
prompt -- ждеть пока ползовател что то ведет,
и возвращает null  если нажался cancel
confirm -- ждеть пока ползовател что то ведет,
и возвращает true/false
================
|| - или, делает проверку до первого true,  можно запинается на "правду", если же нет никакой истина то возвращает последнее значение, 
&& -  и, Если левый аргумент – false, оператор И возвращает его и заканчивает вычисления. Иначе – вычисляет и возвращает правый аргумент. Иначе можно сказать, что "&& запинается на лжи".
! - не, 
================
Преобразование типов
String(val) -- строковое преобразование
'+' --  тоже преобразует к строке
Number(val) -- численное преобразование, 
еще можно использовать унарный '+'
Boolen(true) -- преобразование к логическому типу
null - при численнои преобразование становится  '0'
===============================================
while{
	тело цикла
}
do{
	можно вывести условие до проверки
}while(условие)
for(var u=5; u<5; u++){ тело цикла}
директивы -- break(прервать), continue(продолжение, )
metka -- primer
One: 
for(var i = 2; i <= 10; i++){
	for(var j = 2; j < i; j++){
		if(i % j == 0) continue One;
	}
	alert(i);
}
===============================================
switch(browser){
	case 'IE':
		alert( 'О, да у вас IE!' );
		break;

	case 'Chrome':
	case 'Firefox':
	case 'Safari':
	case 'Opera':
		alert( 'Да, и эти браузеры мы поддерживаем' );
		break;
		
	default: 
		alert( 'Мы надеемся, что и в вашем браузере все ок!' );
}
===============================================
function showMessage(){
	return var name = 'Asito';
}
function checkAge(age){
	return (age > 18) ? true : confirm('Родители разрешили?');
}

function checkAge(age){
	return (age > 18) || confirm('Родители разрешили?');
}
function min(a, b){
 return	if(a < b) ? a : b;
}
function pow(x, n){
	var result;
	for(var i = 1; i < n; i++){
		result *= x;
	}
	return x;
}
===============================================
Функциональные выражения
В JavaScript функция является значением, таким же как строка или число.
Основное отличие между ними: функции, объявленные как Function Declaration, создаются интерпретатором до выполнения кода.

Поэтому их можно вызвать до объявления, например:

sayHi("Вася"); // Привет, Вася
function sayHi(name) {
  alert( "Привет, " + name );
}

А если бы это было объявление Function Expression, то такой вызов бы не сработал:

sayHi("Вася"); // ошибка!
var sayHi = function(name) {
  alert( "Привет, " + name );

Function Decleration -- не будет работать если функцию вызывают с условием
Function Expression  -- будет работать
function ask(question,  yes, no){
	if(confirm(question)) yes();
	else no();
}
function ask(question, yes, no){
	if(confirm(question)) yes()
	else no();
}
	 function showOk(){
		alert('Вы согласились');
	}
	 function showNo(){
		alert('Вы отменили действие!');
	}

ask("Вы согласны?", showOk, showNo);

// анонимные funtion 
ask('вы согласны?', 
	function() { alert('Вы согласились');}, 
	function(){ alert('Вы отменили действие!' );}
);
// есть еще способ создание function : 
var sum = new Function('a,b', 'return a + b;');
var result  = sum(5,6);
alert(result);
функция тоже как строка, его можно присваиват к другому перенменному, и передавать, создавать в любом месте кода
Function Declaration -- function ask(){}
Funtion Expression   -- var ask = function(){}
но у них отличие:
function declaration -- не работает при if,  а function expression работает!
===============================================
рукурсивная функцич - это функция которая вызывает самого себя. Пример: pow(x, n):
function pow(x, n){
	if(n != 1){
		return x * pow(x, n-1); 
	}else x;
}
с помошьб рекурсии
funtion sumTo(x){
	if(x == 1) return 1;
	return x+sumTo(x - 1);
}

с помошью цикла
funtion sumTo(x){
	var sum = 0;
	for(var i =1; i<x; i++){
		sum += i;
	}
	return sum;
}

решение по формуле sumTo(x) = x*(x+1)/2
function sumTo(x){
	return x * (x+1)/2;
}

factorial
function factorial(n){
	if(n != 1) return x * factorial(n-1);
	else return x;
}

c исползование ? :
funtion fact(n){
	return (n != 1) ? n * fact(n-1) : n;
}
число Фибоначы
funtion fib(n){
	return (n <= 1) ? n : fib(n-1) + fib(n-2);
}

а через цикл более будет вычислятся
function fib(n){
	var a = 1, b = 1;
	for(var i = 3; i <= n; i++){
		var c = a + b;
		a = b;
		b = c;
	}
	return b;
}
var g = f;
f = undefined;
 все равно будеи работать


===============================================
Named Funtion Expression
var f = function fact(n){
	return n ? n * fact(n-1) : 1;
}


===============================================
Автоматизированные средства проверки
JSLint — проверяет код на соответствие стилю JSLint , в онлайн-интерфейсе вверху можно
ввести код, а внизу различные настройки проверки, чтобы сделать её более мягкой.
JSHint — вариант JSLint с большим количеством настроек.
Closure Linter — проверка на соответствие Google JavaScript Style Guide .
===============================================

===============================================

===============================================


===============================================

===============================================

===============================================

===============================================

===============================================

===============================================

===============================================

===============================================

===============================================

===============================================

===============================================


===============================================

===============================================

===============================================

===============================================

===============================================
